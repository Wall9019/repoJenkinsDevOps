pipeline {
    agent {
        docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '-v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/tmp'
            registryUrl 'https://index.docker.io/v1/'
            // Removi registryCredentialsId pois o agente Docker não requer se a imagem for pública
        }
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', 
                        branches: [[name: 'main']], 
                        userRemoteConfigs: [[url: 'https://github.com/Wall9019/repoJenkinsDevOps']]])
            }
        }

        stage('Build and Test') {
            steps {
                script {
                    def appDir = 'java-maven-sonar-argocd-helm-k8s/spring-boot-app'
                    sh """
                        cd ${appDir} 
                        mvn clean package -DskipTests
                    """
                }
            }
        }

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://54.80.240.203:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonar', variable: 'SONAR_AUTH_TOKEN')]) {
                    script {
                        def appDir = 'java-maven-sonar-argocd-helm-k8s/spring-boot-app'
                        sh """
                            cd ${appDir}
                            mvn sonar:sonar \
                                -Dsonar.login=${SONAR_AUTH_TOKEN} \
                                -Dsonar.host.url=${SONAR_URL}
                        """
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "camilacarolina/ultimate-cicd:${BUILD_NUMBER}"
            }
            steps {
                script {
                    def appDir = 'java-maven-sonar-argocd-helm-k8s/spring-boot-app'
                    withCredentials([usernamePassword(credentialsId: 'dockerToken', 
                                                   usernameVariable: 'DOCKER_USER', 
                                                   passwordVariable: 'DOCKER_PWD')]) {
                        sh """
                            cd ${appDir}
                            docker build -t ${DOCKER_IMAGE} .
                            echo ${DOCKER_PWD} | docker login -u ${DOCKER_USER} --password-stdin
                            docker push ${DOCKER_IMAGE}
                        """
                    }
                }
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "repoJenkinsDevOps"
                GIT_USER_NAME = "Wall9019"
            }
            steps {
                withCredentials([string(credentialsId: 'gitToken', variable: 'GITHUB_TOKEN')]) {
                    script {
                        def deploymentFile = 'java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml'
                        sh """
                            git config --global user.email "211037695@aluno.unb.br"
                            git config --global user.name "Jenkins"
                            
                            sed -i "s|ultimate-cicd:[0-9]*|ultimate-cicd:${BUILD_NUMBER}|g" ${deploymentFile}
                            
                            git add ${deploymentFile}
                            git commit -m "Automated: Update image to build ${BUILD_NUMBER}"
                            git push "https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git" HEAD:main
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            node('master') {  // Substituído o parâmetro 'label' por 'master'
                script {
                    sh 'docker logout || true'  // Limpeza segura
                    sh 'docker system prune -f || true'
                }
            }
        }
    }
}
