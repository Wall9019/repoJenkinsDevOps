pipeline {
    agent {
        docker {
            image 'maven:3.8.6-jdk-11' // Imagem com Maven e JDK
            args '-u root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    
    environment {
        DOCKER_IMAGE = "wall90/funcionap:${BUILD_NUMBER ?: 'latest'}"
        SONAR_URL = "http://52.200.185.43:9000"
    }
    
    stages {
        stage('Initialize') {
            steps {
                sh '''
                    apt-get update && apt-get install -y docker.io
                    docker --version
                '''
            }
        }
        
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', 
                          branches: [[name: 'main']], 
                          userRemoteConfigs: [[
                            url: 'https://github.com/Wall9019/repoJenkinsDevOps',
                            credentialsId: 'GITHUB_TOKEN'
                          ]]]
                )
            }
        }
        
        stage('Build and Test') {
            steps {
                script {
                    def appDir = 'java-maven-sonar-argocd-helm-k8s/spring-boot-app'
                    sh """
                        cd ${appDir} 
                        mvn clean package -DskipTests
                    """
                }
            }
        }
        
        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar', variable: 'SONAR_AUTH_TOKEN')]) {
                    script {
                        def appDir = 'java-maven-sonar-argocd-helm-k8s/spring-boot-app'
                        sh """
                            cd ${appDir}
                            mvn sonar:sonar \
                                -Dsonar.login=${SONAR_AUTH_TOKEN} \
                                -Dsonar.host.url=${SONAR_URL}
                        """
                    }
                }
            }
        }
        
        stage('Build and Push Docker Image') {
            steps {
                script {
                    def appDir = 'java-maven-sonar-argocd-helm-k8s/spring-boot-app'
                    withCredentials([usernamePassword(
                        credentialsId: 'docker',  // Credencial do Docker Hub
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PWD'
                    )]) {
                        sh """
                            cd ${appDir}
                            docker build -t ${DOCKER_IMAGE} .
                            echo ${DOCKER_PWD} | docker login -u ${DOCKER_USER} --password-stdin
                            docker push ${DOCKER_IMAGE}
                        """
                    }
                }
            }
        }
        
        stage('Security Scan with Trivy') {
            steps {
                script {
                    sh """
                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                            -v \$HOME/.cache/trivy:/root/.cache/trivy \
                            ghcr.io/aquasecurity/trivy:latest \
                            image --ignore-unfixed --exit-code 0 --severity HIGH,CRITICAL ${DOCKER_IMAGE}
                        
                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                            -v \$HOME/.cache/trivy:/root/.cache/trivy \
                            ghcr.io/aquasecurity/trivy:latest \
                            image --ignore-unfixed --exit-code 1 --severity CRITICAL ${DOCKER_IMAGE}
                    """
                }
            }
        }
        
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "repoJenkinsDevOps"
                GIT_USER_NAME = "Wall9019"
            }
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                withCredentials([string(credentialsId: 'GITHUB_TOKEN', variable: 'GITHUB_TOKEN')]) {
                    script {
                        def deploymentFile = 'java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml'
                        sh """
                            git config --global user.email "211037695@aluno.unb.br"
                            git config --global user.name "Jenkins"
                            sed -i "s|ultimate-cicd:[0-9]*|funcionap:${BUILD_NUMBER}|g" ${deploymentFile}
                            git add ${deploymentFile}
                            git commit -m "Automated: Update image to build ${BUILD_NUMBER}"
                            git push "https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git" HEAD:main
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                sh 'docker logout || true'
            }
        }
    }
}
