pipeline {
    agent any
    environment {
        DOCKER_CREDENTIALS_ID = 'docker'
        SONARQUBE_CREDENTIALS_ID = 'sonar'
        GIT_CREDENTIALS_ID = 'git'
        DOCKER_IMAGE = 'wall90/funcionap'
        DOCKER_TAG = 'latest'
        SONARQUBE_SERVER = 'http://<IP_DO_SONARQUBE>:9000'
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    // Clona o repositório usando as credenciais do Git
                    git credentialsId: GIT_CREDENTIALS_ID, url: 'https://github.com/Wall9019/repoJenkinsDevOps.git'
                }
            }
        }
        stage('Build Maven Project') {
            steps {
                script {
                    // Executa o build do Maven
                    sh 'mvn clean package -DskipTests'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Constrói a imagem Docker
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                }
            }
        }
        stage('Security Scan with Trivy') {
            steps {
                script {
                    // Executa o scan de segurança com Trivy
                    sh "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v /root/.cache/trivy:/root/.cache/trivy aquasec/trivy:latest image --ignore-unfixed --exit-code 0 --severity CRITICAL ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    // Faz login no Docker Hub
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                    }
                    // Faz o push da imagem
                    sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    // Faz logout do Docker Hub
                    sh 'docker logout'
                }
            }
        }
    }
    post {
        always {
            // Limpa as imagens Docker locais para economizar espaço
            sh "docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true"
        }
    }
}
