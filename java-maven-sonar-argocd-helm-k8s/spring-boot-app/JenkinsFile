pipeline {
    agent {
        docker {
            image 'maven:3.8.6-jdk-11'  // Imagem com Maven, JDK e compatibilidade com Docker
            args '-u root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    
    environment {
        DOCKER_IMAGE = "wall90/funcionap:${BUILD_NUMBER ?: 'latest'}"
        SONAR_URL    = "http://52.200.185.43:9000"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM', 
                    branches: [[name: 'main']], 
                    userRemoteConfigs: [[
                        url: 'https://github.com/Wall9019/repoJenkinsDevOps',
                        credentialsId: 'GITHUB_TOKEN'
                    ]]
                ])
            }
        }
        
        stage('Build and Test') {
            steps {
                // Altere para o diretório onde está o POM.xml
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }
        
        stage('Security Scan with Trivy') {
            steps {
                script {
                    echo "Executando o scan com Trivy..."
                    // Executa o Trivy via Docker; captura o código de saída sem interromper o pipeline
                    def trivyStatus = sh(script: """
                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\
                            -v \$HOME/.cache/trivy:/root/.cache/trivy \\
                            ghcr.io/aquasecurity/trivy:latest image \\
                            --ignore-unfixed --exit-code 1 --severity CRITICAL ${DOCKER_IMAGE}
                    """, returnStatus: true)
                    
                    echo "Código de saída do Trivy: ${trivyStatus}"
                    if (trivyStatus != 0) {
                        echo "Vulnerabilidades críticas detectadas. Confira o relatório para maiores detalhes."
                        // Aqui você pode registrar o status, notificar a equipe ou mesmo marcar o build como UNSTABLE, se desejado
                    } else {
                        echo "Scan sem vulnerabilidades críticas."
                    }
                }
            }
        }
        
        stage('Build and Push Docker Image') {
            steps {
                script {
                    echo "Construindo a imagem Docker..."
                    sh "docker build -t ${DOCKER_IMAGE} ."
                    echo "Enviando a imagem para o repositório..."
                    sh "docker push ${DOCKER_IMAGE}"
                }
            }
        }
    }
    
    post {
        always {
            // Efetua logout do Docker para limpar credenciais
            sh 'docker logout || true'
        }
    }
}
