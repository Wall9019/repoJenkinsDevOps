pipeline {
    agent {
        docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '--user=root --storage-opt overlay2.override_kernel_check=1'  // Removi mounts desnecessários
            registryUrl 'https://index.docker.io/v1/'
        }
    }
    
    environment {
        DOCKER_IMAGE = "wall90/funcionap:${BUILD_NUMBER ?: 'latest'}"
        SONAR_URL = "http://54.80.240.203:9000"
    }

    stages {
        // Etapa nova para limpeza preventiva
        stage('Pre-Cleanup') {
            steps {
                script {
                    sh '''
                        docker system prune -f || true
                        docker volume prune -f || true
                    '''
                }
            }
        }

        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', 
                          branches: [[name: 'main']], 
                          userRemoteConfigs: [[url: 'https://github.com/Wall9019/repoJenkinsDevOps']]])
            }
        }

        stage('Build and Test') {
            steps {
                script {
                    def appDir = 'java-maven-sonar-argocd-helm-k8s/spring-boot-app'
                    sh """
                        set -e
                        cd ${appDir} 
                        mvn clean package -DskipTests
                    """
                }
            }
        }

        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar', variable: 'SONAR_AUTH_TOKEN')]) {
                    script {
                        def appDir = 'java-maven-sonar-argocd-helm-k8s/spring-boot-app'
                        sh """
                            set -e
                            cd ${appDir}
                            mvn sonar:sonar \
                                -Dsonar.login=${SONAR_AUTH_TOKEN} \
                                -Dsonar.host.url=${SONAR_URL}
                        """
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    def appDir = 'java-maven-sonar-argocd-helm-k8s/spring-boot-app'
                    withCredentials([usernamePassword(credentialsId: 'dockerToken', 
                                                      usernameVariable: 'DOCKER_USER', 
                                                      passwordVariable: 'DOCKER_PWD')]) {
                        sh """
                            set -e
                            cd ${appDir}
                            docker buildx build --load -t ${DOCKER_IMAGE} .  // Usa BuildKit para eficiência
                            echo ${DOCKER_PWD} | docker login -u ${DOCKER_USER} --password-stdin
                            docker push ${DOCKER_IMAGE}
                        """
                    }
                }
            }
        }
        
        stage('Security Scan with Trivy') {
            agent {
                docker {
                    image 'ghcr.io/aquasecurity/trivy:latest'
                    args '--user=root --entrypoint=""'  // Configuração específica para Trivy
                }
            }
            steps {
                script {
                    sh """
                        trivy image --exit-code 1 --severity CRITICAL ${DOCKER_IMAGE}  // Só falha para vulnerabilidades CRÍTICAS
                    """
                }
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "repoJenkinsDevOps"
                GIT_USER_NAME = "Wall9019"
            }
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                withCredentials([string(credentialsId: 'gitToken', variable: 'GITHUB_TOKEN')]) {  // Corrigi para gitToken
                    script {
                        def deploymentFile = 'java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml'
                        sh """
                            set -e
                            git config --global user.email "211037695@aluno.unb.br"
                            git config --global user.name "Jenkins"
                            
                            sed -i "s|ultimate-cicd:[0-9]*|funcionap:${BUILD_NUMBER}|g" ${deploymentFile}
                            
                            git add ${deploymentFile}
                            git commit -m "Automated: Update image to build ${BUILD_NUMBER}"
                            git push "https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git" HEAD:main
                        """
                    }
                }
            }
        }

        // Etapa nova para monitoramento de espaço
        stage('Disk Space Check') {
            steps {
                sh '''
                    df -h /var/lib/docker | awk \'{print $5 " " $6}\' | grep -v Use | while read output;
                    do
                        uso=$(echo $output | awk \'{print $1}\' | cut -d\'%\' -f1)
                        if [ $uso -ge 85 ]; then
                            echo "Erro: Espaço em disco crítico ($uso%)"
                            exit 1
                        fi
                    done
                '''
            }
        }
    }

    post {
        always {
            node {  // Contexto obrigatório para execução
                script {
                    sh """
                        docker logout || true
                        docker system prune -a --volumes --force || true  // Limpeza agressiva
                    """
                }
            }
        }
    }
}
