pipeline {
    agent any
    environment {
        DOCKER_CREDENTIALS_ID    = 'docker'          // Credencial do Docker Hub (username/password)
        SONARQUBE_CREDENTIALS_ID = 'sonar'           // Credencial do SonarQube (token ou user/pass)
        GIT_CREDENTIALS_ID       = 'git'             // Credencial para acesso ao Git
        DOCKER_IMAGE = 'wall90/funcionap'            // Nome da imagem Docker
        DOCKER_TAG   = 'latest'                      // Tag da imagem
        SONARQUBE_SERVER = 'http://<IP_DO_SONARQUBE>:9000'  // URL do SonarQube
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo 'Checking out source code...'
                    try {
                        git branch: 'main', credentialsId: GIT_CREDENTIALS_ID, url: 'https://github.com/Wall9019/repoJenkinsDevOps.git'
                        echo 'Checkout completed successfully.'
                    } catch (err) {
                        echo "Error during Git checkout: ${err}"
                        error "Checkout failed - terminating pipeline."
                    }
                }
            }
        }
        stage('Build Maven Project') {
            steps {
                script {
                    echo 'Building Maven project...'
                    // Navega até o diretório onde se encontra o pom.xml
                    dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                        try {
                            sh 'mvn clean package -DskipTests'
                            echo 'Maven build completed successfully.'
                        } catch (err) {
                            echo "Maven build error: ${err}"
                            error "Build failed - terminating pipeline."
                        }
                    }
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    echo 'Starting SonarQube analysis...'
                    try {
                        // Usa as configurações do SonarQube definidas no Jenkins (configurar o SonarQube Server na seção de configuração do Jenkins)
                        withSonarQubeEnv('SonarQube') {
                            // Executa a análise com o Maven; o projectKey deve ser ajustado conforme o seu projeto
                            sh "mvn sonar:sonar -Dsonar.projectKey=funcionap"
                        }
                        echo 'SonarQube analysis completed successfully.'
                    } catch (err) {
                        echo "SonarQube analysis failed: ${err}"
                        error "Pipeline aborted due to SonarQube analysis failure."
                    }
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker image...'
                    try {
                        sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                        echo 'Docker image built successfully.'
                    } catch (err) {
                        echo "Docker build error: ${err}"
                        error "Docker image build failed - terminating pipeline."
                    }
                }
            }
        }
        stage('Security Scan with Trivy') {
            steps {
                script {
                    echo 'Scanning Docker image with Trivy...'
                    // Executa o scan com Trivy e direciona o relatório para trivy-report.txt
                    def trivyCmd = "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock " +
                                   "-v /root/.cache/trivy:/root/.cache/trivy aquasec/trivy:latest image " +
                                   "--ignore-unfixed --severity CRITICAL ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    def exitCode = sh(script: "${trivyCmd} | tee trivy-report.txt", returnStatus: true)
                    if (exitCode != 0) {
                        echo "Trivy scan completed with issues (exit code ${exitCode}). Check the report for details."
                        // Marca o build como UNSTABLE, mas não interrompe o pipeline
                        currentBuild.result = 'UNSTABLE'
                    } else {
                        echo 'Trivy scan completed successfully with no critical vulnerabilities.'
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'trivy-report.txt', allowEmptyArchive: true
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    echo 'Pushing Docker image to Docker Hub...'
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, 
                                                          usernameVariable: 'DOCKER_USERNAME', 
                                                          passwordVariable: 'DOCKER_PASSWORD')]) {
                        try {
                            sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        } catch (err) {
                            echo "Docker login failed: ${err}"
                            error "Docker login failed - terminating pipeline."
                        }
                    }
                    try {
                        sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                        echo 'Docker image pushed successfully.'
                    } catch (err) {
                        echo "Docker push failed: ${err}"
                        error "Docker push failed - terminating pipeline."
                    } finally {
                        sh 'docker logout'
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Cleaning up local Docker image...'
            sh "docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true"
            echo 'Pipeline execution complete.'
        }
    }
}
